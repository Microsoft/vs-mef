steps:
- task: ms-vseng.MicroBuildShipTasks.7c429315-71ba-4cb3-94bb-f829c95f7915.MicroBuildCodesignVerify@2
  displayName: Verify Signed Files
  inputs:
    TargetFolders: |
      $(Build.SourcesDirectory)/bin/$(BuildConfiguration)/Packages

- task: MicroBuildCleanup@1
  condition: succeededOrFailed()
  displayName: MicroBuild Cleanup

- task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
  displayName: Component Detection
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- task: NuGetCommand@2
  inputs:
    command: push
    searchPatternPush: '$(Build.SourcesDirectory)\bin\**\$(BuildConfiguration)\**\*.nupkg;!**\*.symbols.nupkg;!**/VS.*.nupkg'
    publishVstsFeed: $(feedGuid)
    allowPackageConflicts: true
  displayName: Push packages to VSTS feed
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

# The Convert-PDB.ps1 script uses nuget.exe at the cmdline, so make sure it's on our PATH
- task: NuGetToolInstaller@0
  inputs:
    versionSpec: 4.6.2
  displayName: Pin nuget.exe version

- powershell: |
    $DllPaths = @(
        ,"bin\Microsoft.VisualStudio.Composition.dll"
        ,"bin\Microsoft.VisualStudio.Composition.AppHost.dll"
        ,"bin\Microsoft.VisualStudio.Composition.Configuration.dll"
        ,"bin\Microsoft.VisualStudio.Composition.NetFxAttributes.dll"
    )
    Get-ChildItem $DllPaths -rec |% {
        $OutputDir = "$($_.Directory.FullName)\symstore"
        if (!(Test-Path $OutputDir)) { mkdir $OutputDir | Out-Null }
        Write-Host "Converting PDB for $_"
        azure-pipelines\Convert-PDB.ps1 -DllPath $_ -OutputPath "$OutputDir\$($_.BaseName).pdb"
    }
  displayName: Converting portable PDBs to Windows PDBs

- task: CopyFiles@1
  inputs:
    SourceFolder: bin
    Contents: |
      Microsoft.VisualStudio.Composition/$(BuildConfiguration)/**/Microsoft.VisualStudio.Composition.dll
      Microsoft.VisualStudio.Composition/$(BuildConfiguration)/**/symstore/Microsoft.VisualStudio.Composition.pdb
      Microsoft.VisualStudio.Composition.Configuration/$(BuildConfiguration)/**/Microsoft.VisualStudio.Composition.Configuration.dll
      Microsoft.VisualStudio.Composition.Configuration/$(BuildConfiguration)/**/symstore/Microsoft.VisualStudio.Composition.Configuration.pdb
      Microsoft.VisualStudio.Composition.NetFxAttributes/$(BuildConfiguration)/**/*.dll
      Microsoft.VisualStudio.Composition.NetFxAttributes/$(BuildConfiguration)/**/symstore/*.pdb
      !Tests/**
    TargetFolder: $(Build.ArtifactStagingDirectory)/symbols
  displayName: Collecting symbols artifacts

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: $(Build.ArtifactStagingDirectory)/symbols
    ArtifactName: symbols
    ArtifactType: Container
  displayName: Publish symbols as Azure DevOps artifacts

- task: PublishSymbols@2
  inputs:
    SymbolsFolder: $(Build.ArtifactStagingDirectory)/symbols
    SearchPattern: '**/*.pdb'
    IndexSources: false
    SymbolServerType: TeamServices
  displayName: Publish symbols to symbol server
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- task: Ref12.ref12-analyze-task.ref12-analyze-task.Ref12Analyze@0
  displayName: Ref12 (Codex) Analyze
  inputs:
    codexoutputroot: $(Build.ArtifactStagingDirectory)\Codex
    workflowArguments: |
      /sourcesDirectory:$(Build.SourcesDirectory)
      /codexRepoUrl:$(Build.Repository.Uri)
      /repoName:$(Build.Repository.Name)
      /additionalCodexArguments:-bld
      /additionalCodexArguments:$(Build.ArtifactStagingDirectory)/build_logs
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  continueOnError: true
